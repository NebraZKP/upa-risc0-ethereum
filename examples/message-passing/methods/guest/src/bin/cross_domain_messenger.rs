// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::{Address, U256};
use alloy_sol_types::{sol, SolValue};
use risc0_steel::{ethereum::EthEvmInput, Contract, SolCommitment};
use risc0_zkvm::guest::env;
use serde::{Deserialize, Serialize};

risc0_zkvm::guest::entry!(main);

/// Specify the function to call using the [`sol!`] macro.
/// This parses the Solidity syntax to generate a struct that implements the `SolCall` trait.
sol! {
    /// IL1CrossDomainMessenger contains function signature.
    interface IL1CrossDomainMessenger {
        function contains(bytes32 digest) external view returns (bool);
    }
}

/// ABI encodable journal data.
sol! {
    struct Journal {
        SolCommitment commitment;
        address l1CrossDomainMessenger;
        address sender;
        address target;
        uint256 nonce;
        bytes data;
        bytes32 digest;
    }
}

#[derive(Serialize, Deserialize)]
pub struct CrossDomainMessengerInput {
    pub l1_cross_domain_messenger: Address,
    pub sender: Address,
    pub target: Address,
    pub nonce: U256,
    pub data: Vec<u8>,
}

fn main() {
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let cross_domain_messenger_input: CrossDomainMessengerInput = env::read();

    // Converts the input into a `EvmEnv` for execution.
    let env = input.into_env();

    let mut hasher = alloy_primitives::Keccak256::new();
    hasher.update(&cross_domain_messenger_input.sender);
    hasher.update(&cross_domain_messenger_input.target);
    hasher.update(&cross_domain_messenger_input.nonce.to_be_bytes::<32>());
    hasher.update(&cross_domain_messenger_input.data);
    let digest = hasher.finalize();


    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let call = IL1CrossDomainMessenger::containsCall { digest };
    let returns = Contract::new(cross_domain_messenger_input.l1_cross_domain_messenger, &env).call_builder(&call).call();

    // Check that the message exists.
    assert!(returns._0);

    // Commit the block hash and number used when deriving `view_call_env` to the journal.
    let journal = Journal {
        commitment: env.into_commitment(),
        l1CrossDomainMessenger: cross_domain_messenger_input.l1_cross_domain_messenger,
        sender: cross_domain_messenger_input.sender,
        target: cross_domain_messenger_input.target,
        nonce: cross_domain_messenger_input.nonce,
        data: cross_domain_messenger_input.data.into(),
        digest: digest,
    };
    env::commit_slice(&journal.abi_encode());
}
